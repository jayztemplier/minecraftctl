#!/usr/bin/ruby
require 'rubygems'
require 'main'
require 'open3'
require 'thread'
require 'pathname'

class Message
	def initialize(msg)
		@msg = msg
	end

	attr_reader :msg

	def to_s
		@msg
	end

	class Internal < Message
		def initialize(msg)
			super(' -- ' + msg)
		end
	end

	class Out < Message
	end

	class Err < Message
		def initialize(line)
			x, @time, @level, @msg = *line.match(/^([^ ]* [^ ]*) \[([^\]]*)\] (.*)/)
		end

		attr_reader :time, :level, :msg

		def to_s
			@msg
		end
	end
end

class Minecraft
	def initialize(cmd)
		@cmd = cmd
		@in_queue = Queue.new
		@out_queue = Queue.new

		@running = false

		@history = []
		@recent = []
	end

	def running?
		@running
	end

	def start
		collect_msg do
			if @running
				internal_msg "Server already running"
			else
				time_operation("Server start") do
					@stdin, stdout, stderr = Open3.popen3(@cmd) 
					@running = true

					@out_reader = Thread.new do
						stdout.each do |line|
							puts "OUT: #{line}"
							@out_queue << Message::Out.new(line)
						end
					end

					@err_reader = Thread.new do
						stderr.each do |line|
							puts "ERR: #{line}"
							@out_queue << Message::Err.new(line)
						end
					end

					wait_msg do |m|
						m.msg =~ /Done \(([^n]*)ns\)!/
					end
				end
			end
		end
	end

	def stop
		unless @running
			return collect_msg do
				internal_msg "Server already stopped"
			end
		else
			return command('stop') do
				@running = false
				time_operation("Server stop") do
					@out_reader.join
					@err_reader.join
				end
			end
		end
	end

	def save_all
		command('save-all') do
			time_operation("Save") do
				wait_msg{|m| m.msg =~ /Save complete/}
			end
		end
	end

	def list
		command('list') do
			wait_msg{|m| m.msg =~ /Connected players:/}
		end
	end

	def command(cmd)
		raise RuntimeError, "server not running" unless @running
		collect_msg do
			@stdin.write("#{cmd}\n")
			if block_given?
				yield 
			else
				active_wait
			end
		end
	end

	def history
		archive_msg
		@history
	end

	private

	def flush_msg
		until @out_queue.empty? 
			@recent << @out_queue.pop(true)
		end
	end

	def archive_msg
		flush_msg
		recent = @recent.dup
		@history += @recent
		@recent.clear
		recent
	end

	def collect_msg
		archive_msg
		yield
		archive_msg
	end

	def internal_msg(msg)
		@out_queue << Message::Internal.new(msg)
	end

	def time_operation(name)
		start = Time.now
		yield
		internal_msg "#{name} finished in #{(Time.now - start).to_f}"
	end

	def wait_msg(discard = false)
		loop do
			msg = @out_queue.pop
			if yield msg
				@recent << msg unless discard
				break
			end
			@recent << msg
		end
	end

	def active_wait
		@stdin.write("list\n")
		wait_msg(true){|m| m.msg =~ /Connected players:/}
	end

end

class Daemon
	def self.daemonize(pid_file, log_file = nil)
		exit if fork
		Process.setsid # become session leader
		exit if fork # and exits
		# now in child
	
		# try to lock before we kill stdin/out
		lock(pid_file)

		if log_file
			log = File.open(log_file, 'a')
		else
			log = '/dev/null'
		end

		# disconnect
		STDIN.reopen '/dev/null'
		STDOUT.reopen log
		STDERR.reopen log
	end

	def self.lock(pid_file)
		pf = File.open(pid_file, 'r+')
		fail "Server already running with pid: #{pf.read}" unless pf.flock(File::LOCK_EX|File::LOCK_NB)
		pf.truncate(0)
		pf.write(Process.pid.to_s)
		pf.flush
	end
end

Main do
	description 'lounches Minecraft server that can be controlled via HTTP'

	option 'command', 'c' do
		default 'java -Xms256M -Xmx512M -Djava.net.preferIPv4Stack=true -jar minecraft_server.jar nogui'
		description 'command to be used to span server'
	end

	option 'port', 'p' do
		default 25560
		description 'port on which the control HTTP server should be running'
	end

	option 'foreground', 'f' do
		description 'don\'t daemonize'
	end

	option 'pid-file', 'P' do
		description 'pid file relative to minecraft-dir'
		default 'minecraftctlserver.pid'
	end

	option 'log-file', 'l' do
		description 'log file relative to minecraft-dir when in not in foreground'
		default 'minecraftctlserver.log'
	end

	argument 'minecraft-dir' do
		description 'directory path to mincraft server installation directory'
	end

	run do
		pid_file = Pathname.new(params['minecraft-dir'].value) + params['pid-file'].value
		log_file = Pathname.new(params['minecraft-dir'].value) + params['log-file'].value

		if params['foreground'].given?
			Daemon.lock(pid_file)
		else
			Daemon.daemonize(pid_file, log_file)
		end

		require 'sinatra/base'
		require 'haml'

		Dir.chdir(params['minecraft-dir'].value)

		minecraft = Minecraft.new(params['command'].value)

		minecraft.start

		s = Sinatra.new
		s.set :port, params['port'].value

		s.post '/save-all' do
			@msg = minecraft.save_all
			haml :messages
		end

		s.post '/start' do
			@msg = minecraft.start
			haml :messages
		end

		s.post '/stop' do
			@msg = minecraft.stop
			haml :messages
		end

		s.post '/shutdown' do
			@msg = minecraft.stop

			pid = Process.pid
			Thread.new{ sleep 1; Process.kill(15, pid)}

			haml :messages
		end

		s.post %r{/(.+)} do |cmd|
			args = request.body.read.split("\n")
			@msg = minecraft.command(cmd + " " + args.join(' '))
			haml :messages
		end

		s.get '/help' do
			start = false
			@msg = minecraft.command('help').
			map{|m| m.msg}.
			select do |m|
				next true if start
				if m =~ /Console commands:/
					start = true 
					next false
				end
			end.
			map{|m| m.sub(/help  or  \?/, 'serverhelp ')}.
			map{|m| m.sub(/^( |\t)*/, '')}
			@msg << "log                       show recent server messages"
			@msg << "inspect                   inspect recent server messages"

			haml :messages
		end

		s.get '/list' do
			@msg = minecraft.list
			haml :messages
		end

		s.get '/inspect' do
			@msg = minecraft.history
			haml :messages_inspect
		end

		s.get '/log' do
			@msg = minecraft.history
			haml :messages
		end

		s.get %r{/(.+)} do |cmd|
			@msg = minecraft.command(cmd)
			haml :messages
		end

		s.template :messages do
			'= @msg.join("\n")'
		end

		s.template :messages_inspect do
			'= @msg.map{|m| m.inspect}.join("\n")'
		end

		s.run!
	end
end
