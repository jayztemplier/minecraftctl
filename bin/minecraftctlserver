#!/usr/bin/env ruby
require 'rubygems'
require 'cli'
require 'pathname'
require 'daemon'

require_relative '../lib/minecraftctl'

options = CLI.new do
	description "Lounches minecraft server that can be controlled via HTTP"
	option :command,			:short => :c, :description => 'command to be used to span server', :default => 'java -Xms256M -Xmx512M -Djava.net.preferIPv4Stack=true -jar minecraft_server.jar nogui'
	option :port,				:short => :p, :description => 'TCP port number on which the HTTP control server will be listening', :cast => Integer, :default => 25560
	option :bind,				:short => :b, :description => 'IP address of interface on which the HTTP control server will be listening on; use 0.0.0.0 to bind to all interfaces', :default => '127.0.0.1'
	option :server,				:short => :s, :description => 'HTTP server to use', :default => 'mongrel'
	switch :foreground,			:short => :f, :description => 'don\'t daemonize, stay in foreground'
	option :pid_file,			:short => :P, :description => 'pid file relative to minecraft server direcotry', :default => 'minecraftctlserver.pid'
	option :log_file,			:short => :l, :description => 'log file relative to minecraft server directory where daemon messages will be written', :default => 'minecraftctlserver.log'
	option :startup_timeout,	:short => :S, :description => 'time in seconds after which the control server will exit with error while waiting for minecraft to start up', :cast => Integer, :default => 120
	option :command_timeout,	:short => :T, :description => 'time in seconds after which control server will exit with error while waiting for minecraft console command to finish', :cast => Integer, :default => 41
	argument :directory,		:description => "Directory has to be a path to the minecraft server install directory (where you have 'minecraft_server.jar'); use '.' for current directory", :cast => Pathname, :default => '.'
end.parse! do |options|
	fail "#{options.directory} not a directory" unless options.directory.directory?
end

pid_file = Pathname.new(options.pid_file)
log_file = Pathname.new(options.log_file)

Dir.chdir(options.directory)

begin
	if options.foreground
		Daemon.lock(pid_file)
	else
		Daemon.daemonize(pid_file, log_file)
	end
rescue => e
	puts "Error: failed to start daemon/lock pid: #{e}"
	exit 2
end

minecraft = nil

begin
	minecraft = MCServer.new(options.command, :startup_timeout => options.startup_timeout, :command_timeout => options.command_timeout)
	minecraft.start do |message|
		puts message
	end

	minecraft.console('help') do |message|
		puts message
	end

	minecraft.stop do |message|
		puts message
	end
#rescue Minecraft::StartupFailedError => e
	#puts "Error: failed to start minecraft with '#{options.command}' in '#{options.directory}': #{e}"
	#exit 3
rescue => e
	p e
	puts "Error: #{e}"
	exit 4
end

begin
rescue Errno::EACCES, Errno::EADDRNOTAVAIL, SocketError => e
	puts "Error: failed to bind HTTP server socket (#{options.bind}): #{e}"
	exit 5
ensure
	# make sure we stop the server on exit
	if minecraft.running?
		puts 'stopping minecraft'
		minecraft.stop 
	end
end

